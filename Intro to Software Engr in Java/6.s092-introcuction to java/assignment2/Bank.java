package objects;import java.util.ArrayList;import java.util.Random;import java.util.Scanner;import enums.AccountType;public class Bank {	private String name;	private boolean memFDIC;	private double balance;	private ArrayList<BankAccount> bankAccounts;	public Bank(String name, double bal) {		this.name = name;		this.balance = bal;		this.memFDIC = true;		this.bankAccounts = new ArrayList<BankAccount>();	}		public Bank(String name, double bal, boolean fdic) {		this.name = name;		this.balance = bal;		this.memFDIC = fdic;		this.bankAccounts = new ArrayList<BankAccount>();	}	/**	 * @return the name of the Bank	 */	public String getName() {		return name;	}	/**	 * @return true if the bank is a member of FDIC	 */	public boolean isMemFDIC() {		return memFDIC;	}	/**	 * @return the balance of the bank (the amount money the bank currently has)	 */	public double getBalance() {		return balance;	}	/**	 * @return the bankAccounts at this Bank	 */	public ArrayList<BankAccount> getBankAccounts() {		ArrayList<BankAccount> copy = new ArrayList<BankAccount>();		for(BankAccount b : this.bankAccounts)			copy.add(b.clone());		return bankAccounts;	}		/**	 * @return true if the bank was able to open an account	 * 			false otherwise	 */	public boolean openAccount(){		try{			// Initialize a Scanner to allow for user input			Scanner in = new Scanner(System.in);						// Generate an account number for the user when they open a bank			int accountNumber = genAccountNumber(this.bankAccounts);						// Info to the user			System.out.println("The follow questions are about you.");									String name = getName(in); // Gets name			Date birthday = getBirthday(in); // Gets birthday			String password = getPassword(in); // Gets password						// Minimum required information has been entered			// Call constructor - Create a new bank account for user with only necessary inputs			// 	 with auxiliary info set to default values			this.bankAccounts.add(					new BankAccount(							new Person(name, birthday), password, accountNumber));						// Tries to get user input for the account type			try{				AccountType type = getAccountType(in);				this.bankAccounts.get(this.bankAccounts.size()-1).setAt(type);			} catch (Exception e) { /*DO NOTHING*/ }						// Tries to get user input on initial deposit			try{				double initialDeposit = getInitialDeposit(in);				this.bankAccounts.get(this.bankAccounts.size()-1).deposit(initialDeposit);			} catch (Exception e) { /*DO NOTHING*/ }						// Tries to get user input on the authorized users			try{				ArrayList<Person> authUsers = getAuthorizedUsers(in);				this.bankAccounts.get(this.bankAccounts.size()-1).setAuthorizedPersons(authUsers);			} catch (Exception e) { /*DO NOTHING*/ }						in.close(); // Closes the Scanner input stream						return true; // Account creation successful by this line, therefore return true		} 				// If the minimum amount of information was unattainable, catch the error that was thrown		//  Tell the user here was an error return false		catch ( Exception e ){			System.out.println("OOPS, we could not create an account for you.\n" +  								"There was an error.");			return false;		}	}		public void closeAccount() {		// Need a way to get user input		Scanner in = new Scanner(System.in);				// Get user's Name, Birthday, password and AccNum		String name = getName(in);		Date birthday = getBirthday(in);		String password = getPassword(in);		int accNum = getAccountNumber(in);				// the following method should remove the account owned by the person with that specific accNum		// this should return a boolean		boolean successful = removeAccount(new Person(name, birthday), password, accNum);				if ( successful )			System.out.println("Your account has been closed.  Thank you for banking with us.");		else			System.out.println("There was an error.  Your account does not exist or you entered the "+									"wrong information.");			}		private boolean removeAccount(Person person, String password, int accNum) {						// Find the index of the account using the account number		int index = findAccountIndex(accNum);				// Check if the person is the OWNER and the password matches		// Given an account is the person the owner?				boolean personIsOwner = checkIfPersonIsOwner(index, person);		boolean knowsPassword = checkPassword(index, password);				// If the account exists and the person is the OWNER and the password matches		// 	close the account (remove from list)		// 	return true		// other wise return false				if (personIsOwner && knowsPassword) {			this.bankAccounts.remove(index);			return true;		}				return false;	}	private boolean checkPassword(int index, String password) {		// check if the password they provide matches the account's password		return this.bankAccounts.get(index).getPassword().equals(password);	}	private boolean checkIfPersonIsOwner(int index, Person person) {		// Go to the BA at index		// check if Owner is person		return this.bankAccounts.get(index).getOwner().equals(person);	}	private int findAccountIndex(int accNum) {		// find the account given accNum and return the index of the account in the array of bank accounts		int index = -1;				myForLoop:		for ( int i = 0; i < this.bankAccounts.size(); i++ ){			index = this.bankAccounts.get(i).getAccountNumber() == accNum ? i : -1;						/*			 * 		if ( this.bankAccounts.get(i).getAccountNumber == accNum )			 * 			index = i;			 * 		else			 * 			index = -1			 */			if ( index != -1 )				break myForLoop;						// assign i to be VERY BIG <- bad idea		}					return index;	}	public void deposit() {		// Need a way to get user input		Scanner in = new Scanner(System.in);				// Get user's Name, Birthday, password and AccNum		String name = getName(in);		Date birthday = getBirthday(in);		String password = getPassword(in);				int accNum = getAccountNumber(in);			}	private int getAccountNumber(Scanner in) {		// Ask user to enter the account number		System.out.println("Please enter the account number: ");		int accNum = in.nextInt(); // No need to check if it's an int		return accNum;	}	private int genAccountNumber(ArrayList<BankAccount> bankAccounts) {		// TODO: Implement method		return 0;	}	private boolean accountNumberExists(int accountNumber,			ArrayList<BankAccount> bankAccounts) {		// TODO: Implement method		return false;	}	private ArrayList<Person> getAuthorizedUsers(Scanner in) {		// TODO: Implement Method		return null;	}	private ArrayList<Person> getListAuthUsers(Scanner in) {		// TODO: Implement Method		return null;	}	private int getUserChoice(Scanner in) {		// TODO: Implement Method		return 0;	}	private double getInitialDeposit(Scanner in) {		// TODO: Implement Method		return 0.0;	}	private Date getBirthday(Scanner in) {		// TODO: Implement Method		return null;	}	private AccountType getAccountType(Scanner in) {		// TODO: Implement Method		return null;	}	private String getPassword(Scanner in) {		// TODO: Implement Method		return null;	}	private String getName(Scanner in) {		// TODO: Implement Method		return null;	}	private void clearKBB(Scanner in) {		in.nextLine();			}	}